pipeline {    agent any    stages {        stage('SCM') {            steps {                // Récupération du code depuis le référentiel Git                checkout scm            }        }        // stage('SecurityChecker') {        //     steps {        //         // Exécution du local-php-security-checker pour vérifier les dépendances        //         sh 'local-php-security-checker composer.lock'        //     }        // }        stage('CodingStandards') {            steps {                // Installation des dépendances Composer                sh 'composer install'                // Analyse statique avec PHPStan                sh 'phpstan analyse ./src -l3 || true'                  // Vérification des standards de codage avec php-cs-fixer                sh 'php-cs-fixer fix ./src --rules=@Symfony --verbose || true'                    // Exécute PHPCS pour vérifier la conformité PSR-12                    // Utilise '|| true' pour continuer en cas de violations                // sh 'phpcs --standard=PSR12 src || true'                //     // Exécute PHPCBF pour tenter de corriger automatiquement les violations                //     // Utilise '|| true' pour continuer en cas d'erreurs                // sh 'phpcbf --standard=PSR12 src || true'                //     // Réexécute PHPCS pour vérifier s'il reste des violations                // sh 'phpcs --standard=PSR12 src'                // Analyse de dépendances avec PHPDD                // sh 'phpdd ./src'                // Détection de code en double avec PHPCPD                // sh 'phpcpd ./src --exclude ./src/Controller/Admin/ --exclude ./src/Entity'            }        }        stage('Lint') {            steps {                // Vérification de la syntaxe Twig                sh './bin/console lint:twig templates --env=prod'                // Vérification de la syntaxe YAML                sh './bin/console lint:yaml config --parse-tags'                // Validation du schéma de la base de données                sh './bin/console doctrine:schema:validate --skip-sync -vvv --no-interaction'            }        }        stage('SonarQube Analysis') {            steps {                // Exécution du scanner SonarQube                script {                    def scannerHome = tool 'SonarQubeScanner'                    sh "${scannerHome}/bin/sonar-scanner"                }            }        }    }}